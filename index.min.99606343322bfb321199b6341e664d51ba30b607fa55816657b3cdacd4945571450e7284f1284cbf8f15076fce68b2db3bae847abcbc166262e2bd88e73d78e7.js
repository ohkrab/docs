var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:!0,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/get-started/",title:"Get started",description:"Get started.",content:""}),e.add({id:1,href:"/docs/get-started/overview/",title:"Overview",description:"Introduction to krab, glossary and external links.",content:`Krab documentation consists of the following chapters:
Get started - things to get you set up and running Configuration - resources to use in the configuration files Functions - functions to use in the configuration files Commands - manual for CLI Glossary # configuration file - file with .krab.hcl extension resource - block of code of a given type in a configuration file (e.g. migration resource, migration_set resource etc.) function - built-in function that is available to use in config files command - CLI command that executes built-in action like migrate up reference - identifiable name of a resource, must be unique within a given type (migration \u0026quot;that_is_reference\u0026quot; {...}) Other places # Repository with examples GitHub releases Docker Hub `}),e.add({id:2,href:"/docs/get-started/installation/",title:"Installation",description:"Use various installation methods.",content:`binary # Krab binary can be downloaded from GitHub. Other methods are listed below.
asdf # Krab provides asdf plugin:
asdf plugin add krab https://github.com/ohkrab/asdf-krab.git # or asdf plugin add krab git@github.com:ohkrab/asdf-krab.git Install desired version:
asdf install krab 0.7.0 Set it to your project:
asdf local krab 0.7.0 docker # Docker images can be found at Docker hub.
To start a docker container a DATABASE_URL environment variable must be provided. By default \u0026ldquo;krab\u0026rdquo; reads configuration from /etc/krab that must be mounted as a volume, the path can be changed by KRAB_DIR environment variable.
Pull the docker image:
docker pull ohkrab/krab:nightly Example:
docker run --rm \\ # remove container after command execution -e DATABASE_URL=\u0026#34;...\u0026#34; \\ # provide connection string -v \${HOME}/project1:/etc/krab:ro \\ # mount configuration volume ohkrab/krab:nightly version # run \`version\` command from \`qbart/krab:latest\` one-liner:
docker run --rm -e DATABASE_URL=\u0026#34;...\u0026#34; -v \${HOME}/project1:/etc/krab:ro ohkrab/krab:nightly --version `}),e.add({id:3,href:"/docs/get-started/changelog/",title:"Changelog",description:"Changelog of latest changes.",content:`0.7.0 # add fake generator for actions 0.6.2 # build with go 1.19 0.6.1 # add params to migration generator 0.6.0 # generate migration command 0.5.0 # rewrite parser from hclsimple to schema based decoding make defaults in columns DSL universal (raw SQL, no custom HCL type) 0.4.2 # add quote support for values add support for more defaults in column DSL 0.4.1 # migration status action be explicit about identifier quoting (quote -\u0026gt; quote_ident) improved CLI UI 0.4.0 # migration DSL (not only raw sql) custom schema for migration sets (new attribute) actions (new resource) resource arguments (parametrized commands) windows support small improvements for CLI output schema migration table contains timestamp now 0.3.1 # fixes issue with rolling back the same migration multiple times 0.3.0 # fixes issues with concurrent operations 0.2.4 # added docker 0.2.3 # added validations improved CLI output migration versions are required now Prereleases: 0.2.2 and below # migrations Do not use prerelease versions.
`}),e.add({id:4,href:"/docs/configuration/",title:"Configuration",description:"Configuration",content:""}),e.add({id:5,href:"/docs/configuration/overview/",title:"Overview",description:"Overview of available configuration.",content:`Krab by default will load and parse all the configuration files at KRAB_DIR path. File names should end with .krab.hcl extension, otherwise they won\u0026rsquo;t be loaded.
Every command that touches database is required to provide DATABASE_URL environment variable.
`}),e.add({id:6,href:"/docs/configuration/environment-variables/",title:"Environment variables",description:"Environment variables settings.",content:" KRAB_DIR - directory to load configuration from, if not defined, it defaults to the current working directory DATABASE_URL - PostgreSQL connection string to use when executing actions "}),e.add({id:7,href:"/docs/configuration/resource-arguments/",title:"Resource arguments",description:"Usage of resource arguments and built-in functions.",content:`Some resources accept arguments block that allows to parametrize command.
Arguments blocks are optional and can expand configuration in a flexible ways.
resource [\u0026#34;label\u0026#34; [\u0026#34;label\u0026#34;...]] { arguments { arg \u0026#34;one\u0026#34; { description = \u0026#34;Some argument description\u0026#34; } arg \u0026#34;two\u0026#34; { description = \u0026#34;Argument with specified type\u0026#34; type = \u0026#34;string\u0026#34; # default } } } arg \u0026quot;name\u0026quot; - argument name description - summary of an argument type - currently can only be a string type arguments are required to pass into command Arguments usage # Krab uses Go lang templates to replace values. For full documentation refer to official documentation. For arguments support refer to specific resource documentation.
Arguments are not quoted by default unless stated otherwise ⚠️.
Example:
sql = \u0026#34;CREATE SCHEMA {{ quote_ident .Args.name }}\u0026#34; All arguments must be prefixed with .Args.
Built-in functions # There are built-in functions that allow to operate on arguments before final template is rendered.
quote_ident - quotes identifiers in database, for example: table/column names quote - quotes values in database `}),e.add({id:8,href:"/docs/resources/",title:"Resources",description:"Resources",content:""}),e.add({id:9,href:"/docs/functions/",title:"Functions",description:"List of functions.",content:""}),e.add({id:10,href:"/docs/commands/",title:"Commands",description:"Commands",content:""}),e.add({id:11,href:"/docs/commands/action/",title:"Action",description:"Action command in CLI.",content:`Actions are genarated from configuration and grouped by namespace.
Usage # krab action namespace name [arguments] Example # For view refresh action you would use:
krab action view refresh -name my-view-name `}),e.add({id:12,href:"/docs/resources/action/",title:"Action",description:"Custom SQL action configuration resource.",content:`Action resource is a custom SQL operation that will be executed.
1action \u0026#34;\u0026lt;namespace\u0026gt;\u0026#34; \u0026#34;\u0026lt;name\u0026gt;\u0026#34; { 2 arguments { 3 ... 4 } 5 6 sql = \u0026#34;...\u0026#34; 7} \u0026lt;namespace\u0026gt; - is a action namespace \u0026lt;name\u0026gt; - is a migration reference name to use when connecting to other resources arguments block (optional) - define arguments that can be used in sql as a variable, see Resource arguments for more details sql - code to be executed Arguments # These attributes can be used with arguments:
sql Example # 1action \u0026#34;view\u0026#34; \u0026#34;refresh\u0026#34; { 2 arguments { 3 arg \u0026#34;name\u0026#34; { 4 description = \u0026#34;Materialized view to be refreshed\u0026#34; 5 } 6 } 7 8 sql = \u0026#34;REFRESH MATERIALIZED VIEW {{ .Args.name | quote_ident }}\u0026#34; 9} Fakes # You can generate fake data with fake function template.
1action \u0026#34;seed\u0026#34; \u0026#34;all\u0026#34; { 2 sql = \u0026lt;\u0026lt;-SQL 3 INSERT INTO companies (name) VALUES ({{ fake \u0026#34;Company.Name\u0026#34; | quote }}) 4 SQL 5} `}),e.add({id:13,href:"/docs/",title:"Docs",description:"",content:""}),e.add({id:14,href:"/docs/functions/file-system/",title:"File system",description:"Functions releated to file system.",content:`file_read # file_read reads a file at the given path and returns its content as a string.
sql = file_read(\u0026#34;path\u0026#34;) `}),e.add({id:15,href:"/docs/commands/generate/",title:"Generate",description:"Generate command in CLI.",content:`The gen migration command generates empty migration file.
Usage # krab gen migration -name [ref] [column1:type ... columnN:type] Options # ref - name of the migration reference column:type - column definitions separated by space Special arguments # Instead of specifying column:type you can use built-in syntax sugar:
id - will generate id as a bigint column as an identity with primary key timestamps - will generate created_at and updated_at column pair with timestamp with time zone type Example # This will create new migration file \$KRAB_DIR/db/migrations/[YYYYMMDD]_[HHMMSS]create_maps.krab.hcl with empty structure.
krab gen migration -name create_maps File content:
migration \u0026#34;create_maps\u0026#34; { version = \u0026#34;YYYMMDD_HHMMSS\u0026#34; up { } down { } } With arguments:
krab gen migration -name create_maps id name:varchar project_id:bigint timestamps File content:
migration \u0026#34;create_maps\u0026#34; { version = \u0026#34;YYYMMDD_HHMMSS\u0026#34; up { create_table \u0026#34;maps\u0026#34; { column \u0026#34;id\u0026#34; \u0026#34;bigint\u0026#34; { identity {} } column \u0026#34;name\u0026#34; \u0026#34;varchar\u0026#34; {} column \u0026#34;project_id\u0026#34; \u0026#34;bigint\u0026#34; {} column \u0026#34;created_at\u0026#34; \u0026#34;timestamptz\u0026#34; { null = false } column \u0026#34;updated_at\u0026#34; \u0026#34;timestamptz\u0026#34; { null = false } primary_key { columns = [\u0026#34;id\u0026#34;] } } } down { drop_table \u0026#34;maps\u0026#34; {} } } `}),e.add({id:16,href:"/docs/commands/down/",title:"Migrate down",description:"Migrate down command in CLI.",content:`The migrate down command rollbacks selected migration.
After successful operation its version is removed from the migration table. At the beginning of an operation advisory lock is acquired to prevent other operations to run simultaneously.
Usage # krab migrate down [set] [version] Options # set - name of the set to migrate. version - migration version to rollback. Example # For default migration set and migration version 20060102150405 you would use:
krab migrate down default 20060102150405 `}),e.add({id:17,href:"/docs/commands/status/",title:"Migrate status",description:"Migrate status command in CLI.",content:`The migrate status command displays currently applied/pending migrations.
Usage # krab migrate status [set] Options # set - name of the set to migrate. Example output # krab migrate status animals ✔ v1 create_animals ✔ v2 create_animals_view - v3 seed_animals `}),e.add({id:18,href:"/docs/commands/up/",title:"Migrate up",description:"Migrate up command in CLI.",content:`The migrate up command migrates all pending migration for a given migration set.
After successful migration its version is put into database migration table (by default schema_migrations). At the beginning of an operation advisory lock is acquired to prevent other migrations to run simultaneously.
When migration table does not exist, it will be created.
Migrations are executed in the order defined by migration set, NOT lexicographically. Usage # krab migrate up [set] Options # set - name of the set to migrate. Example # For default migration set you would use:
krab migrate up default `}),e.add({id:19,href:"/docs/resources/migration/",title:"Migration",description:"Migration configuration resource.",content:`Migration resource is a single migrate operation.
1migration \u0026#34;\u0026lt;reference\u0026gt;\u0026#34; { 2 version = \u0026#34;\u0026lt;version\u0026gt;\u0026#34; 3 transaction = true 4 5 up { 6	sql = \u0026#34;...\u0026#34; 7 } 8 9 down { 10	sql = \u0026#34;...\u0026#34; 11 } 12} \u0026lt;reference\u0026gt; - is a migration reference name to use when connecting to other resources \u0026lt;version\u0026gt; - name that will be used to identify migration in the database, can only be digits, alphanumeric characters and underscores up / down - migration direction, contains SQL code to be executed transaction (optional) - specifies whether run migration in a transaction (default: true) DSL # Up/Down migration can use built-in DSL for Data Definition Language.
DSL order matters, code will run in that order (sql attribute order also matters) Supported DDL:
CREATE TABLE DROP TABLE CREATE INDEX DROP INDEX Example # 1migration \u0026#34;create_tenants\u0026#34; { 2 version = \u0026#34;20060102150405\u0026#34; 3 4 up { 5	sql = \u0026#34;CREATE TABLE tenants(name VARCHAR PRIMARY KEY)\u0026#34; 6 } 7 8 down { 9	sql = \u0026#34;DROP TABLE tenants\u0026#34; 10 } 11} DSL example # 1migration \u0026#34;create_categories\u0026#34; { 2 version = \u0026#34;v1\u0026#34; 3 4 up { 5 create_table \u0026#34;categories\u0026#34; { 6	column \u0026#34;id\u0026#34; \u0026#34;bigint\u0026#34; {} 7	column \u0026#34;name\u0026#34; \u0026#34;varchar\u0026#34; { null = false } 8 9	primary_key { columns = [\u0026#34;id\u0026#34;] } 10	} 11 } 12 13 down { 14 drop_table \u0026#34;categories\u0026#34; {} 15 } 16} 17 18migration \u0026#34;create_animals\u0026#34; { 19 version = \u0026#34;v2\u0026#34; 20 21 up { 22	create_table \u0026#34;animals\u0026#34; { 23 # \u0026#34;id\u0026#34; bigint GENERATED ALWAYS AS IDENTITY 24	column \u0026#34;id\u0026#34; \u0026#34;bigint\u0026#34; { 25	identity {} 26	} 27 28	column \u0026#34;name\u0026#34; \u0026#34;varchar\u0026#34; { null = true } 29	30	column \u0026#34;extinct\u0026#34; \u0026#34;boolean\u0026#34; { 31	null = false 32	default = \u0026#34;TRUE\u0026#34; 33	} 34 35	column \u0026#34;weight_kg\u0026#34; \u0026#34;int\u0026#34; { null = false } 36 37 # \u0026#34;weight_g\u0026#34; int GENERATED ALWAYS AS (weight_kg * 1000) STORED 38	column \u0026#34;weight_g\u0026#34; \u0026#34;int\u0026#34; { 39	generated { 40	as = \u0026#34;weight_kg * 1000\u0026#34; 41	} 42	} 43 44	column \u0026#34;category_id\u0026#34; \u0026#34;bigint\u0026#34; { 45	null = false 46	} 47 48	unique { 49	columns = [\u0026#34;name\u0026#34;] 50	include = [\u0026#34;weight_kg\u0026#34;] 51	} 52 53	primary_key { 54	columns = [\u0026#34;id\u0026#34;] 55	include = [\u0026#34;name\u0026#34;] 56	} 57 58 # CONSTRAINT \u0026#34;ensure_positive_weight\u0026#34; CHECK (weight_kg \u0026gt; 0) 59	check \u0026#34;ensure_positive_weight\u0026#34; { 60	expression = \u0026#34;weight_kg \u0026gt; 0\u0026#34; 61	} 62 63	foreign_key { 64	columns = [\u0026#34;category_id\u0026#34;] 65 66	references \u0026#34;categories\u0026#34; { 67	columns = [\u0026#34;id\u0026#34;] 68 69	on_delete = \u0026#34;cascade\u0026#34; 70	on_update = \u0026#34;cascade\u0026#34; 71	} 72	} 73	} 74 } 75 76 down { 77 drop_table \u0026#34;animals\u0026#34; {} 78 } 79} 80 81migration_set \u0026#34;animals\u0026#34; { 82 migrations = [ 83 migration.create_categories, 84 migration.create_animals 85 ] 86} DSL index example # 1migration \u0026#34;create_animals\u0026#34; { 2 version = \u0026#34;v1\u0026#34; 3 transaction = false 4 5 up { 6	create_table \u0026#34;animals\u0026#34; { 7	column \u0026#34;id\u0026#34; \u0026#34;bigint\u0026#34; {} 8 9	column \u0026#34;name\u0026#34; \u0026#34;varchar\u0026#34; {} 10	11	column \u0026#34;extinct\u0026#34; \u0026#34;boolean\u0026#34; {} 12 13	column \u0026#34;weight_kg\u0026#34; \u0026#34;int\u0026#34; {} 14	} 15 16 # CREATE UNIQUE INDEX \u0026#34;idx_uniq_name\u0026#34; ON \u0026#34;animals\u0026#34; USING btree (\u0026#34;name\u0026#34;) INCLUDE (\u0026#34;weight_kg\u0026#34;) 17	create_index \u0026#34;animals\u0026#34; \u0026#34;idx_uniq_name\u0026#34; { 18	unique = true 19	columns = [\u0026#34;name\u0026#34;] 20	using = \u0026#34;btree\u0026#34; 21	include = [\u0026#34;weight_kg\u0026#34;] 22	} 23 24 # CREATE INDEX CONCURRENTLY \u0026#34;idx_heavy_animals\u0026#34; ON \u0026#34;animals\u0026#34; (\u0026#34;weight_kg\u0026#34;) WHERE (weight_kg \u0026gt; 5000) 25	create_index \u0026#34;animals\u0026#34; \u0026#34;idx_heavy_animals\u0026#34; { 26	columns = [\u0026#34;weight_kg\u0026#34;] 27	where = \u0026#34;weight_kg \u0026gt; 5000\u0026#34; 28	concurrently = true 29	} 30 } 31 32 down { 33 drop_index \u0026#34;public.idx_uniq_name\u0026#34; { 34	cascade = true 35	} 36 37 drop_index \u0026#34;idx_heavy_animals\u0026#34; { 38	concurrently = true 39	} 40 41 drop_table \u0026#34;animals\u0026#34; {} 42 } 43} 44 45migration_set \u0026#34;animals\u0026#34; { 46 migrations = [ 47 migration.create_animals 48 ] 49} `}),e.add({id:20,href:"/docs/resources/migration-set/",title:"Migration set",description:"Migration set configuration resource.",content:`Migration Set is a collection of migrations.
1migration_set \u0026#34;\u0026lt;reference\u0026gt;\u0026#34; { 2 schema = \u0026#34;public\u0026#34; 3 4 migrations = [ 5 ... 6 ] 7} \u0026lt;reference\u0026gt; - migration set reference name schema (optional) - schema name where to create schema_migrations table and run migrations (SET search_path TO \u0026lt;schema\u0026gt; is executed before each migration), default: public migrations - list of migrations references Arguments # These attributes can be used with arguments:
schema - value is automatically quoted 1migration_set \u0026#34;tenant\u0026#34; { 2 arguments { 3 arg \u0026#34;schema\u0026#34; {} 4 } 5 6 schema = \u0026#34;{{.Args.schema}}\u0026#34; 7 8 migrations = [...] 9} Example # 1migration_set \u0026#34;private\u0026#34; { 2 migrations = [ 3 migration.create_tenants 4 ] 5} 6 7migration \u0026#34;create_tenants\u0026#34; { 8 version = \u0026#34;20200628\u0026#34; 9 10 up { 11 sql = \u0026#34;CREATE TABLE tenants(name varchar PRIMARY KEY)\u0026#34; 12 } 13 14 down { 15 sql = \u0026#34;DROP TABLE tenants\u0026#34; 16 } 17} `}),e.add({id:21,href:"/docs/commands/version/",title:"Version",description:"Version command in CLI.",content:"The version command prints the version of Krab.\nUsage # krab version Example # $ krab version krab 0.6.1 Build a2aa572cd37e64c38f16925c1152a2bed1fc4c0a 2021-07-04 "}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()